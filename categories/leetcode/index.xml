<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on miss you</title>
    <link>https://Yfei1104.github.io/categories/leetcode/</link>
    <description>Recent content in leetcode on miss you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Aug 2020 15:59:15 +0800</lastBuildDate>
    
	<atom:link href="https://Yfei1104.github.io/categories/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode-双指针</title>
      <link>https://Yfei1104.github.io/2020/leetcode-1/</link>
      <pubDate>Mon, 03 Aug 2020 15:59:15 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/leetcode-1/</guid>
      <description>leetcode 167. 两数之和 II - 输入有序数组  题目描述：给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
 方法一：二分查找 在数组中找到两个数之和等于目标值，可以先固定一个数，然后利用有序数组的性质，二分查找第二个数。为了避免重复，第二个数只能从第一个数右侧找。
遍历数组时间复杂度O(N)，二分查找O(lgN)，所以总的时间复杂度O(NlgN)。空间复杂度O(1)。
class Solution { public: vector&amp;lt;int&amp;gt; twoSum(vector&amp;lt;int&amp;gt;&amp;amp; num, int target) { for (int i = 0; i &amp;lt; num.size(); i ++) { int l = i + 1, r = num.size() - 1; while (l &amp;lt; r) { int mid = (l + r) &amp;gt;&amp;gt; 1; if (num[mid] &amp;gt;= target - num[i])	r = mid; else	l = mid + 1; } if (num[l] + num[r] == target)	return {i + 1, l + 1}; } return {-1, -1}; } }; 方法二：双指针 使用双指针，一个指针指向值较小的元素，一个指针指向值较大的元素。指向较小元素的指针从头向尾遍历，指向较大元素的指针从尾向头遍历。</description>
    </item>
    
  </channel>
</rss>