<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on miss you</title>
    <link>https://Yfei1104.github.io/tags/golang/</link>
    <description>Recent content in golang on miss you</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Sep 2020 15:51:15 +0800</lastBuildDate>
    
	<atom:link href="https://Yfei1104.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go-tools</title>
      <link>https://Yfei1104.github.io/2020/go-tools/</link>
      <pubDate>Wed, 09 Sep 2020 15:51:15 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-tools/</guid>
      <description>/golang的工具集合，待完成。</description>
    </item>
    
    <item>
      <title>golang-worker-pool</title>
      <link>https://Yfei1104.github.io/2020/go-worker-pool/</link>
      <pubDate>Wed, 09 Sep 2020 10:49:51 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-worker-pool/</guid>
      <description>golang工作池公共库：Go 高性能异步并发goroutine池。接口调用简单、支持错误返回、限制任务执行的并发性，而不是排队的任务数、无论排队多少任务，都不会阻止提交任务。可用于控制并发访问、并发执行。
安装  $ go get github.com/xxjwxc/gowp 实现  WorkerPool的定义如下：
type WorkPool struct { closed int32 isQueTask int32 // Mark whether queue retrieval is task. 标记是否队列取出任务 	errChan chan error // error chan 	timeout time.Duration // max timeout 	wg sync.WaitGroup task chan TaskHandler waitingQueue *myqueue.MyQueue } 其中TaskHandler是一个返回时error的func()函数。
定义完工作池后需要注册工作池，并且设置最大的并发数：
func New(max int) *WorkPool { // 注册工作池，并设置最大并发数 	if max &amp;lt; 1 { max = 1 } p := &amp;amp;WorkPool{ task: make(chan TaskHandler, 2*max), errChan: make(chan error, 1), waitingQueue: myqueue.</description>
    </item>
    
    <item>
      <title>golang-cache2go-2</title>
      <link>https://Yfei1104.github.io/2020/go-library-cache2go-2/</link>
      <pubDate>Sat, 08 Aug 2020 17:22:57 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-library-cache2go-2/</guid>
      <description>上次我们介绍了cache2go缓存库的两种类型和其中的一些方法的实现，今天我们接着继续详细介绍cachetable类型提供的一些方法的实现。
缓存表提供了缓存常见的方法：
 增：Add，NotFoundAdd 删：Delete 查：Value 过期检查：expirationCheck 缓存刷新：Flush 缓存遍历：Foreach 回调函数设置：SetAboutToDeleteItemCallback，SetAddedItemCallback，SetDataLoader 访问最多的前几个缓存项：MostAccessed &amp;hellip;  添加缓存   首先通过NewCacheItem(key, lifeSpan, value)来完成CacheItem的初始化 接下里需要通过调用自身的addInternal(cacheItem)将cacheItem添加到cacheTable中，并且执行添加item的回调函数 当cleanupInterval等于0或者lifespan&amp;lt;cleanupInterval时开始检查是否有过期缓存 addInternal()方法要在加锁之后才能调用，并且在执行callback之前不能解除锁  func (table *CacheTable) addInternal(item *CacheItem) { // 要在加锁之后才能调用该方法，并且在执行callback之前不能解除锁  ... table.items[item.key] = item expDur := table.cleanupInterval addedItem := table.addedItem table.Unlock() // 添加item的回调函数 	if addedItem != nil { for _, callback := range addedItem { callback(item) } } // lifespan小于清除间隔时就要执行过期检查，重设cleanupInterval 	if item.lifeSpan &amp;gt; 0 &amp;amp;&amp;amp; (expDur == 0 || item.</description>
    </item>
    
    <item>
      <title>golang-cache2go-1</title>
      <link>https://Yfei1104.github.io/2020/go-library-caches2go-1/</link>
      <pubDate>Sat, 08 Aug 2020 10:26:52 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-library-caches2go-1/</guid>
      <description>今天学习比较容易上手的开源缓存库cache2go。
cache2go  此开源库的作者是这样介绍cache2go的
Concurrency-safe golang caching library with expiration capabilities. cache2go是一个保证并发安全的并带有过期控制功能的缓存库 它是一个用go实现并发安全的缓存库，实现了以下的特征：
  并发安全
  可设置每条缓存的超时时间
  内置了缓存访问计数
  自调节的缓存过期检查
  缓存的回调函数
  &amp;hellip;
  库的核心代码就三个文件，主要的技术包括锁机制、goroutine、map操作等等，很适合初学者学习。
源码解析  cache2go中主要涉及到两个类型cacheitem、cachetable。
 一个cacheitem代表了一条缓存 一个cachetable代表了一个缓存表，由一条条缓存组成  cacheitem  type CacheItem struct { sync.RWMutex // The item&amp;#39;s key. 	key interface{} // The item&amp;#39;s data. 	data interface{} // How long will the item live in the cache when not being accessed/kept alive.</description>
    </item>
    
    <item>
      <title>golang-scheduler</title>
      <link>https://Yfei1104.github.io/2020/go-scheduler/</link>
      <pubDate>Tue, 04 Aug 2020 14:16:35 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-scheduler/</guid>
      <description>goroutine是go语言原生支持并发的表现形式。编写的go代码无一例外都是在goroutine中运行的。你可以启动许多甚至成千上万个的goroutine，go的runtime就是负责对goroutine进行调度，决定哪个goroutine获取资源，哪个goroutine让出资源等等。适当了解一下goroutine的调度模型和原理，对于编写出更好的go代码是大有裨益的。
当我们提起go语言调度器，就绕不开操作系统、进程、线程这些概念。线程是操作系统调度时的最基本单元，，在不同的操作系统上进程和线程有不同的实现，比如linux系统调度器就不区分进程和线程的调度，但是绝大部分的实现中线程都是属于进程的。
未完待续。。。
https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-goroutine/
https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/
https://www.cnblogs.com/mokafamily/p/9975980.html
https://learnku.com/articles/45302
https://www.jianshu.com/p/d5c48704c2f9</description>
    </item>
    
    <item>
      <title>golang-获取文件的大小</title>
      <link>https://Yfei1104.github.io/2020/go-filesize/</link>
      <pubDate>Sat, 01 Aug 2020 21:16:53 +0800</pubDate>
      
      <guid>https://Yfei1104.github.io/2020/go-filesize/</guid>
      <description>在go语言中，我们有很多方法获取一个文件的大小。
Read字节方式  第一种，当然是最常见的read()方法，也就是打开文件，把文件读一遍
func main() { file, err := os.open(&amp;#34;filename&amp;#34;) if err == nil { sum := 0 buf := make([]byte, 1024) for { n, err := file.read(buf) sum += n if err == io.EOF { break } } fmt.Println(&amp;#34;file size is &amp;#34;, sum) } } 这种方式需要打开文件，通过for循环反复的读取文件里面的内容，然后去计算文件的大小。效率低，代码量大。
ioutil方式  由于上面的代码量比较大，所以我们可能立刻会想到使用ioutul包的ReadFile()方法来替代，直接获取文件的内容，然后计算出文件的大小。
func main() { contents, err := ioutil.ReadFile(&amp;#34;filename&amp;#34;) if err == nil { fmt.Println(&amp;#34;file size is &amp;#34;, len(contents)) } } 虽然ioutil通过三行代码就可以搞定，但是这同时也存在着效率低的问题，尤其是当我们读取大型文件的时候。</description>
    </item>
    
  </channel>
</rss>